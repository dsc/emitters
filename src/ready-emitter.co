{ EventEmitter } = require './emitter'


/**
 * @class An EventEmitter that auto-triggers new handlers once "ready".
 * @extends EventEmitter
 */
export class ReadyEmitter extends EventEmitter
    @__emitter_methods__ = EventEmitter.__emitter_methods__.concat <[ ready ]>
    
    /**
     * Whether this object is ready.
     * @type Boolean
     */
    _ready : false
    
    
    /**
     * Name of the ready event.
     * @type String
     */
    __ready_event__ : 'ready'
    
    
    /**
     * Getter for the ready state.
     * @returns {Boolean} Whether the emitter is ready or not.
     */
    /**
     * Registers a callback on ready; fired immediately if already ready.
     * @param {Function} callback The callback.
     * @returns {this}
     */
    /**
     * Setter for the ready state.
     * 
     * If truthy, this triggers the 'ready' event provided it has not yet been
     * triggered, and subsequent listeners added to this event will be 
     * auto-triggered.
     * 
     * If falsy, this resets the 'ready' event to its non-triggered state, firing a
     * 'ready-reset' event.
     * 
     * @param {Boolean} value Sets the ready state.
     * @param {Boolean} [force=false] Trigger the event even if already ready.
     * @returns {this}
     */
    ready: (val, force=false) ->
        return !!@_ready unless val?
        
        if typeof val is 'function'
            return @on @__ready_event__, val
        
        val = !!val
        return this if val is @_ready and not force
        @_ready = val
        evt = @__ready_event__
        evt = "#{evt}-reset" unless val
        @emit evt, this
        return this
    
    
    /**
     * Wrap {@link EventEmitter#on} registration to handle registrations
     * on 'ready' after we've broadcast the event. Handler will always still
     * be registered, however, in case the emitter is reset.
     * 
     * @param {String} events Space-separated events for which to register.
     * @param {Function} callback
     * @returns {this}
     */
    on: (events, callback) ->
        super ...
        if @ready() and events.split(/\s+/).indexOf(@__ready_event__) > -1
            setTimeout ~> callback.call this, this
        this
    
    
    # Update alias
    addListener : @::on
    
