{ EventEmitter } = require './emitter'


/**
 * @class An EventEmitter that re-dispatches events to its parent.
 * @extends EventEmitter
 */
export class ChainedEmitter extends EventEmitter
    @__emitter_methods__ = EventEmitter.__emitter_methods__.concat <[ parentEmitter ]>
    
    
    /**
     * @constructor
     * @param {EventEmitter} [parent] Our parent emitter for bubbling.
     */
    (parent) ->
        @parentEmitter parent if parent
    
    
    /**
     * @returns {null|EventEmitter} Current parent emitter.
     */
    /**
     * Setter for our parent emitter for bubbling.
     * @param {EventEmitter} parent New parent emitter.
     * @returns {this}
     */
    parentEmitter: (parent) ->
        return @_parentEmitter unless parent?
        @_parentEmitter = parent
        this
    
    
    /**
     * As EventEmitter::emit(), but patched to bubble to the
     * parent emitter (if possible), provided the event handler 
     * does not stop propagation by returning `false`.
     * 
     * @param {String} event Event to emit.
     * @param {...Any} args Arguments to pass to the event handlers.
     * @returns {Boolean} Whether propagation was stopped.
     */
    trigger: (name, ...args) ->
        # TODO
        bubble = true
        if queue = (@_events or {})[name]
            for listener of queue
                bubble = (listener.apply(this, args) is not false) and bubble
        
        if bubble and typeof @_parentEmitter?.trigger is 'function'
            ok = @_parentEmitter.trigger(...arguments) or (!!queue)
        
        ok
    
    emit: @::trigger
    
